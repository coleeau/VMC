; Mem layout

Z_StartLSB			:= $80 ;Sent, LSB of where the first byte after header is stores. also used to jump to Program at end.
Z_StartMSB			:= $81 ;Sent, MSB of Above ^
Z_Length_1LSB		:= $82 ;Sent, LSB of the length +1 of the transfer. Used to termitate Transfer
Z_Length_1MSB		:= $83 ;Sent, MSB of Above ^
Z_ChecksumLSB		:= $84 ;Sent, LSB of the Checksum for the sent data
Z_ChecksumMSB		:= $85 ;Sent, MSB of Above ^
Z_Signature_J		:= $86 ;Sent, First byte of the signature
Z_Signature_D		:= $87 ;Sent, Second byte of the signature
Z_CountLSB			:= $88 ;Local, LSB of Where the current byte will be stored
Z_CountMSB			:= $89 ;Local, MSB of Above ^
Z_CalcChecksumLSB	:= $8a ;Local, LSB of the Checksum Calculation of every byte recived
Z_CalcChecksumMSB	:= $8b ;Local, MSB of Above ^


























.include "../IO_DEF.ASM"

;comment out for nmos
.pc02


.segment "CODE"

Entrypoint:
sei
	.ifpc02
	.else
		cld; stack not cleared bc it is unused
	.endif
setup:
ldy #%00000100 
sty R_BANK_SEL 
lda #$00
sta R_TIE ; clear timer register

Main:
.scope
Setup:
txa ; to be able to use asl (+1) x (and now a) is $40 
ldx #%11000001
stx R_COMM_FIFO_CTRL 
asl ; a goes from $40 to $80 lda #%10000000 avoided 
sta R_COMM_LINE_CTRL ; LCR (enable divisor accses)
ldx #12
stx R_COMM_DIV_LSB ;(set baud to 9600)
asl; lda #$00 avoided (-1)
dex ;ldx #%00001011 avoided as 1011 is 1 less than 12 (-1)
sta R_COMM_DIV_MSB ; DLM

stx R_COMM_LINE_CTRL ; LCR
                ;lda #$00 avoided by using x
	;sta $6071 ; IER (not neccisary as ier set to 00 on reset (-3)
	.ifpc02
		ldy StrVMC-Str ; (vmc)
		jsr Send_MSG
	.endif
RamClear:
.scope

lda #$00
sta $01
sta $00
ldy #$02
ldx #$40 ;adjusted to use x; 1 more so bne could be used (and beq would fall thu) (-2) 
Loop:
sta ($00), Y ;startLSB
iny
cpy #$ff
bne Loop
inc $01
cpx $01			
bne Loop  ;(jmp loop) main will fall thru (-4)
ldy StrRDY-Str ; (ready)
jsr Send_MSG
.endscope


.scope	Header ;copies header values only to zp
	lda #$80 ;setting temporary write location for header
	sta Z_CountLSB 
	asl
	sta Z_CountMSB
	Loop:
	jsr Read
	inc Z_CountLSB 
	lda Z_CountLSB
	cmp #$88 ; Count
	bne Loop
	lda Z_StartLSB ; copy LOCATION to COUNT
	sta Z_CountLSB
	lda Z_StartMSB
	sta Z_CountMSB
	SignatureCompare:
	lda #$4A
	cmp Z_Signature_J
	bne Invalid
	lda #$44
	cmp Z_Signature_D
	beq Skip2
	Invalid:
	ldy StrINVLD-Str ; (invalid)
	jsr Send_MSG
	.ifpc02
		Fail_Branch: ; second jump to ram clear is too far, chaining to fix.
		bra RamClear
	.else
		jmp Header::Fail_Branch ;too far to use branch
	.endif
	Skip2:
.endscope
.scope
Loop:
jsr Read
inc Z_CountLSB ; Inc write address
bne CountMSBIncSkip
inc Z_CountMSB
CountMSBIncSkip:
lda Z_Length_1LSB
bne LengthMSBDecSkip
dec Z_Length_1MSB
LengthMSBDecSkip:
dec Z_Length_1LSB			
lda Z_Length_1MSB	;lda #$00 removed bc can just load into a
bne Loop ;jmp (will always be not eqaul)
lda Z_Length_1LSB
bne Loop

.endscope
Done:
	Checksum:
.scope
lda Z_CalcChecksumLSB
ldx #$02 ;avoiding cpx #$ff by increasing by 1
Loop:
sec
sbc Z_ChecksumLSB-1, X ;avoiding cpx #$ff by decreasing memory adress by 1
bcs Skip
dec Z_CalcChecksumMSB
Skip:
dex
;cpx #$ff (-2)
bne Loop
cmp Z_ChecksumLSB
bne Invalid
lda Z_CalcChecksumMSB
cmp Z_ChecksumMSB
bne Invalid
OK:			;beq OK avoided by changing order
ldy StrOK-Str ; (ok)
jsr Send_MSG
jmp ($0080)
Invalid:
ldy StrCHKSM-Str ;(Checksum)
jsr Send_MSG
	.ifpc02
		bra Header::Fail_Branch
	.else
		jmp Header::Fail_Branch ;too far to use branch
	.endif  ;too far for branch
.endscope
.endscope











Read:; reads a byte in to a location in memory defined by Z_Count, and adds it to checksum calculation
.scope
	.ifpc02
		
	.else
	ldy #$00
	.endif
Loop:
bit R_COMM_LINE_STAT ; better than lda, lsr (-1) ;check if there is data in fifo
bcc Loop ; wait if not
lda R_COMM_TXRX 
	
	.ifpc02
		sta (Z_CountLSB)
	.else
		sta (Z_CountLSB), Y
	.endif
clc
adc Z_CalcChecksumLSB ;add to chcksum calc
sta Z_CalcChecksumLSB
bcc Skip
inc Z_CalcChecksumMSB
;clc (not needed??)
Skip:
rts
.endscope

Send_MSG: ; sends a message to comm. y is ofset in string table
.scope
Loop: ;(0)
lda Str, Y
beq Terminate

sta R_COMM_TXRX
iny 

	.ifpc02
		bra Loop
	.else
		bne Loop ; should be not equal as long as y=ff and iny does NOT occur (in order to get past beq termitate, zero must be not equal). should never happen because Y is never set and should never be set as ff 
	.endif
Terminate: 
cpy #$02
beq Return
ldy #$00
beq Loop
Return:
rts
.endscope

.segment "DATA" ;count real number of char + 1 (for length byte) || length byte then data
Str:
StrCR:		.byte $0d, $0a, $00 
.ifpc02
	StrVMC:	.asciiz "VMC"
.endif
StrRDY:		.asciiz "READY"
StrOK:		.asciiz "OK"
StrCHKSM:	.asciiz "CHECKSUM"
StrINVLD:	.asciiz "INVALID"








.segment "VEC"
.word $ffff
.word Entrypoint
.word $ffff








;OK0
;ERR0
;CHKSM0
;INVLD0